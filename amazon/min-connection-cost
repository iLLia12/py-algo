def getMinConnectionCost(capacity, q):
    res = []
    capacityLength = len(capacity)
    dp = [0] * capacityLength
    i = capacityLength - 2
    while i >= 0:
        dp[i] = capacity[capacityLength - 1] - capacity[i] + dp[i + 1]
        i -= 1
    i = 0
    while i <= len(q) - 1:
        query = q[i]
        l = len(query) - 1
        s = 0
        right = capacityLength - 1
        curRes = []
        while l >= -1:
            left = query[l] if l >= 0 else 0
            left -= 1
            diff = capacity[capacityLength - 1] - capacity[right]
            rl = right - left - 1
            diff1 = dp[left + 1] - ((diff * rl) + dp[right])
            curRes.append(diff1)
            l -= 1
            right = left
        res.append(sum(curRes))
        i += 1
    return res

# [8]
q = [[2,4]]
warehouseCapacity = [3,6,10,15,20]
getMinConnectionCost(warehouseCapacity, q)

# [12,18]
q = [[2,5], [1,3]]
warehouseCapacity = [0,2,5,9,12,18]
getMinConnectionCost(warehouseCapacity, q)


class Solution:
    def roadCost(self, wc, q):

        ans = []
        l = len(wc)
        mainHubVal = wc[-1]
        nearestHubVal = 0
        wc[l - 2] = wc[-1] - wc[l-2]
        for i in range(l - 3, -1, -1):
            wc[i] = (wc[-1] - wc[i]) + wc[i + 1]

        wc[-1] = 0
        for hubs in q:
            cost = 0
            start = 0
            for hub in hubs:
                hub -= 1
                if hub == start:
                    start += 1
                    continue
                countStations = hub - start
                diff = mainHubVal - (mainHubVal - (wc[hub] - wc[hub + 1]))
                diff = countStations * diff
                cost += wc[start] - wc[hub] - diff
                start = hub + 1
            if hubs[-1] - 1 < l - 2:
                cost += wc[hubs[-1]]
            ans.append(cost)

        return ans
